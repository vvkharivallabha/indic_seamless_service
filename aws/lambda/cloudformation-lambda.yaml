AWSTemplateFormatVersion: "2010-09-09"
Description: "Indic-Seamless Model Service on AWS Lambda with API Gateway"

Parameters:
  ServiceName:
    Type: String
    Default: indic-seamless-lambda
    Description: Name of the Lambda service

  ImageUri:
    Type: String
    Description: ECR image URI for the Lambda function

  Environment:
    Type: String
    Default: production
    AllowedValues: ["development", "staging", "production"]
    Description: Environment name

  MemorySize:
    Type: Number
    Default: 3008
    MinValue: 128
    MaxValue: 3008
    Description: Memory allocation for Lambda function (MB)

  Timeout:
    Type: Number
    Default: 900
    MinValue: 30
    MaxValue: 900
    Description: Timeout for Lambda function (seconds)

  HuggingFaceToken:
    Type: String
    NoEcho: true
    Description: HuggingFace token for model access (optional)
    Default: ""

  Stage:
    Type: String
    Default: prod
    AllowedValues: ["dev", "staging", "prod"]
    Description: API Gateway stage name

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ServiceName}*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ServiceName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Ref ImageUri
      PackageType: Image
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          HF_TOKEN: !Ref HuggingFaceToken
          MODEL_NAME: "ai4bharat/indic-seamless"
          TRUST_REMOTE_CODE: "true"
          LOG_LEVEL: "INFO"
          HF_HOME: "/tmp/huggingface"
          TRANSFORMERS_CACHE: "/tmp/transformers"
          TORCH_HOME: "/tmp/torch"
          MODEL_CACHE_DIR: "/tmp/models"
      Description: "Indic-Seamless Speech-to-Text service on Lambda"

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ServiceName}"
      RetentionInDays: 30

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ServiceName}-api"
      Description: "API for Indic-Seamless Speech-to-Text Service"
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - "audio/*"
        - "application/octet-stream"
        - "multipart/form-data"

  # API Gateway Resource (catch-all)
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{proxy+}"

  # API Gateway Method (ANY for all HTTP methods)
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway Method for root path
  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS method for CORS
  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayRootMethod
      - ApiGatewayOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Stage
      Description: !Sub "${Environment} deployment"

  # Note: CloudWatch Alarms removed to avoid permissions issues
  # They can be added later via AWS Console or separate CloudFormation stack

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
    Export:
      Name: !Sub "${ServiceName}-api-url"

  LambdaFunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${ServiceName}-lambda-arn"

  LambdaFunctionName:
    Description: "Lambda Function Name"
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub "${ServiceName}-lambda-name"

  ApiGatewayId:
    Description: "API Gateway ID"
    Value: !Ref ApiGateway
    Export:
      Name: !Sub "${ServiceName}-api-id"
